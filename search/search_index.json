{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Blink Documentation","text":"<ul> <li> <p>\u26a1 High Performance</p> <p>Blink is designed for speed and efficiency, with advanced event batching, smart directory watching, and optimized filtering.</p> </li> <li> <p>\ud83d\udc41\ufe0f Real-time Monitoring</p> <p>Monitor file system changes in real-time using Server-Sent Events (SSE) for instant notifications.</p> </li> <li> <p>\ud83d\udd0d Powerful Filtering</p> <p>Filter events by file patterns or event types to focus on what matters to your application.</p> </li> <li> <p>\ud83c\udf10 Language Agnostic</p> <p>Use Blink with any programming language or framework that supports SSE.</p> </li> </ul>"},{"location":"#what-is-blink","title":"What is Blink?","text":"<p>Blink is a high-performance file system watcher that monitors directories for changes and provides events through a server-sent events (SSE) stream. It's designed to be fast, efficient, and easy to use, with a focus on real-time notifications and integration with other systems.</p>"},{"location":"#key-features","title":"Key Features","text":"<ul> <li>Watcher: High-performance file system monitoring with batched events and separate file/directory handling</li> <li>Recursive Directory Watching: Monitor entire directory trees for changes</li> <li>Symbolic Link Support: Properly follows symbolic links for comprehensive monitoring</li> <li>Server-Sent Events (SSE): Real-time notifications via standard SSE protocol</li> <li>Cross-Origin Resource Sharing: Configurable CORS support for web applications</li> <li>Event Filtering: Focus on specific files or event types with improved pattern matching</li> <li>Webhooks: Send HTTP requests when file changes occur</li> <li>High-Performance Design:</li> <li>Event batching for improved performance with editors like Vim</li> <li>Separate processing for file and directory events</li> <li>Configurable batching delay for different workflows</li> <li>Periodic polling for new files</li> <li>Parallel directory scanning</li> <li>Non-blocking channel operations</li> <li>Efficient memory usage with periodic cleanup</li> </ul>"},{"location":"#quick-example","title":"Quick Example","text":"<pre><code># Install Blink\ngo install github.com/TFMV/blink/cmd/blink@latest\n\n# Start watching the current directory\nblink\n\n# In another terminal, make some changes to files\ntouch test.txt\n</code></pre> <p>Connect to the event stream from any language:</p> JavaScriptPythonGo <pre><code>const eventSource = new EventSource('http://localhost:12345/events');\neventSource.onmessage = function(event) {\n  console.log('File changed:', event.data);\n};\n</code></pre> <pre><code>import sseclient\nimport requests\n\nurl = 'http://localhost:12345/events'\nheaders = {'Accept': 'text/event-stream'}\nresponse = requests.get(url, headers=headers, stream=True)\nclient = sseclient.SSEClient(response)\nfor event in client.events():\n    print(f\"File changed: {event.data}\")\n</code></pre> <pre><code>import (\n    \"fmt\"\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Create watcher configuration\n    config := blink.WatcherConfig{\n        RootPath:        \".\",\n        Recursive:       true,\n        HandlerDelay:    100 * time.Millisecond,\n        PollInterval:    4 * time.Second,\n    }\n\n    // Create watcher\n    watcher, err := blink.NewWatcher(config)\n    if err != nil {\n        panic(err)\n    }\n\n    // Start the watcher\n    watcher.Start()\n\n    // Process events\n    for {\n        select {\n        case eventBatch := &lt;-watcher.Events():\n            for _, event := range eventBatch {\n                fmt.Println(\"Event:\", event)\n            }\n        case err := &lt;-watcher.Errors():\n            fmt.Println(\"Error:\", err)\n        }\n    }\n}\n</code></pre>"},{"location":"#getting-started","title":"Getting Started","text":"<p>Check out the Installation guide to get started with Blink, or dive into the Quick Start guide to see it in action.</p>"},{"location":"404/","title":"Page Not Found","text":""},{"location":"404/#oops-the-page-youre-looking-for-doesnt-exist","title":"Oops! The page you're looking for doesn't exist","text":"<p>It seems you've blinked and missed this page. It might have been moved, deleted, or never existed in the first place.</p> <p>Go to Homepage</p> <p>Go Back</p>"},{"location":"api-reference/","title":"API Reference","text":"<p>This page provides a reference for the Blink API, including types, functions, and methods.</p>"},{"location":"api-reference/#package-blink","title":"Package blink","text":"<pre><code>import \"github.com/TFMV/blink/pkg/blink\"\n</code></pre>"},{"location":"api-reference/#types","title":"Types","text":""},{"location":"api-reference/#watcher","title":"Watcher","text":"<pre><code>type Watcher struct {\n    // Underlying fsnotify watcher\n    watcher *fsnotify.Watcher\n\n    // Configuration\n    config WatcherConfig\n\n    // State management\n    directories     map[string]bool\n    watches         map[string]bool\n    dirLock         sync.Mutex\n    handlerLock     sync.Mutex\n\n    // Event handling\n    events          []fsnotify.Event\n    lastHandlerTime time.Time\n\n    // Control channels\n    closeChan       chan bool\n    errorChan       chan error\n    eventChan       chan []fsnotify.Event\n\n    // Polling for new files/directories\n    pollInterval    time.Duration\n}\n</code></pre> <p>The <code>Watcher</code> type provides file watching capabilities with event batching, separate file/directory handling, and periodic polling for new files.</p>"},{"location":"api-reference/#watcherconfig","title":"WatcherConfig","text":"<pre><code>type WatcherConfig struct {\n    // Root directory to watch\n    RootPath string\n\n    // Patterns to include/exclude\n    IncludePatterns []string\n    ExcludePatterns []string\n\n    // Event types to include/ignore\n    IncludeEvents []string\n    IgnoreEvents  []string\n\n    // Whether to watch recursively\n    Recursive bool\n\n    // Delay before handling events (for batching)\n    HandlerDelay time.Duration\n\n    // Polling interval for checking new files\n    PollInterval time.Duration\n}\n</code></pre> <p>The <code>WatcherConfig</code> type holds configuration for the watcher.</p>"},{"location":"api-reference/#eventbatcher","title":"EventBatcher","text":"<pre><code>type EventBatcher struct {\n    // Configuration\n    handlerDelay time.Duration\n\n    // State\n    events          []fsnotify.Event\n    lastHandlerTime time.Time\n    handlerLock     sync.Mutex\n\n    // Output channel\n    eventChan chan []fsnotify.Event\n}\n</code></pre> <p>The <code>EventBatcher</code> type batches file system events to reduce redundant processing.</p>"},{"location":"api-reference/#recursivewatcher","title":"RecursiveWatcher","text":"<pre><code>type RecursiveWatcher struct {\n *fsnotify.Watcher\n Files   chan string // Channel for file events\n Folders chan string // Channel for folder events\n mu      sync.Mutex  // Mutex for thread-safe operations\n}\n</code></pre> <p>The <code>RecursiveWatcher</code> type keeps the data for watching files and directories. It embeds <code>fsnotify.Watcher</code> and adds channels for tracking files and folders.</p>"},{"location":"api-reference/#event","title":"Event","text":"<pre><code>type Event fsnotify.Event\n</code></pre> <p>The <code>Event</code> type represents a file system event. It's a type alias for <code>fsnotify.Event</code>.</p>"},{"location":"api-reference/#timeeventmap","title":"TimeEventMap","text":"<pre><code>type TimeEventMap map[time.Time]Event\n</code></pre> <p>The <code>TimeEventMap</code> type stores filesystem events with their timestamps.</p>"},{"location":"api-reference/#eventfilter","title":"EventFilter","text":"<pre><code>type EventFilter struct {\n    // Include/exclude patterns\n    includePatterns []string\n    excludePatterns []string\n\n    // Event types to include/ignore\n    includeEvents map[fsnotify.Op]bool\n    ignoreEvents  map[fsnotify.Op]bool\n}\n</code></pre> <p>The <code>EventFilter</code> type provides filtering capabilities for file system events.</p>"},{"location":"api-reference/#webhookconfig","title":"WebhookConfig","text":"<pre><code>type WebhookConfig struct {\n URL              string            // URL to send the webhook to\n Method           string            // HTTP method to use (GET, POST, PUT, etc.)\n Headers          map[string]string // Headers to include in the request\n Timeout          time.Duration     // Timeout for the HTTP request\n DebounceDuration time.Duration     // Debounce duration to avoid sending too many webhooks\n MaxRetries       int               // Maximum number of retries for failed requests\n Filter           *EventFilter      // Filter to apply to events before sending webhooks\n}\n</code></pre> <p>The <code>WebhookConfig</code> type defines the configuration for a webhook.</p>"},{"location":"api-reference/#webhookmanager","title":"WebhookManager","text":"<pre><code>type WebhookManager struct {\n Config       WebhookConfig         // Configuration for the webhook\n client       *http.Client          // HTTP client for sending webhooks\n recentEvents map[string]time.Time  // Map to track recent events for debouncing\n mu           sync.Mutex            // Mutex to protect the recentEvents map\n eventChan    chan fsnotify.Event   // Channel to receive events\n}\n</code></pre> <p>The <code>WebhookManager</code> type manages webhooks for file system events.</p>"},{"location":"api-reference/#webhookpayload","title":"WebhookPayload","text":"<pre><code>type WebhookPayload struct {\n Path      string    `json:\"path\"`       // Path of the file that changed\n EventType string    `json:\"event_type\"` // Type of event (create, write, remove, rename, chmod)\n Time      time.Time `json:\"time\"`       // Time the event occurred\n}\n</code></pre> <p>The <code>WebhookPayload</code> type is the JSON payload sent to the webhook URL.</p>"},{"location":"api-reference/#options","title":"Options","text":"<pre><code>type Options struct {\n Filter                  *EventFilter      // Filter to apply to events\n WebhookURL              string            // Webhook URL to send events to\n WebhookMethod           string            // HTTP method to use for webhooks\n WebhookHeaders          map[string]string // Headers to include in webhook requests\n WebhookTimeout          time.Duration     // Timeout for webhook requests\n WebhookDebounceDuration time.Duration     // Debounce duration for webhooks\n WebhookMaxRetries       int               // Maximum number of retries for webhook requests\n}\n</code></pre> <p>The <code>Options</code> type contains all options for the <code>EventServer</code>.</p>"},{"location":"api-reference/#functions","title":"Functions","text":""},{"location":"api-reference/#newwatcher","title":"NewWatcher","text":"<pre><code>func NewWatcher(config WatcherConfig) (*Watcher, error)\n</code></pre> <p><code>NewWatcher</code> creates a new file watcher with the specified configuration.</p>"},{"location":"api-reference/#neweventbatcher","title":"NewEventBatcher","text":"<pre><code>func NewEventBatcher(handlerDelay time.Duration) *EventBatcher\n</code></pre> <p><code>NewEventBatcher</code> creates a new event batcher with the specified handler delay.</p>"},{"location":"api-reference/#newrecursivewatcher","title":"NewRecursiveWatcher","text":"<pre><code>func NewRecursiveWatcher(path string) (*RecursiveWatcher, error)\n</code></pre> <p><code>NewRecursiveWatcher</code> creates a new <code>RecursiveWatcher</code>. It takes a path to a directory to watch recursively.</p>"},{"location":"api-reference/#setverbose","title":"SetVerbose","text":"<pre><code>func SetVerbose(enabled bool)\n</code></pre> <p><code>SetVerbose</code> can be used to enable or disable logging of incoming events.</p>"},{"location":"api-reference/#eventserver","title":"EventServer","text":"<pre><code>func EventServer(path, allowed, eventAddr, eventPath string, refreshDuration time.Duration, options ...Option)\n</code></pre> <p><code>EventServer</code> serves events on a dedicated port. It watches the specified path for changes and serves events via SSE.</p>"},{"location":"api-reference/#neweventfilter","title":"NewEventFilter","text":"<pre><code>func NewEventFilter() *EventFilter\n</code></pre> <p><code>NewEventFilter</code> creates a new event filter.</p>"},{"location":"api-reference/#newwebhookmanager","title":"NewWebhookManager","text":"<pre><code>func NewWebhookManager(config WebhookConfig) *WebhookManager\n</code></pre> <p><code>NewWebhookManager</code> creates a new webhook manager.</p>"},{"location":"api-reference/#methods","title":"Methods","text":""},{"location":"api-reference/#recursivewatcheraddfolder","title":"RecursiveWatcher.AddFolder","text":"<pre><code>func (watcher *RecursiveWatcher) AddFolder(folder string) error\n</code></pre> <p><code>AddFolder</code> adds a directory to watch, non-recursively.</p>"},{"location":"api-reference/#recursivewatcherclose","title":"RecursiveWatcher.Close","text":"<pre><code>func (watcher *RecursiveWatcher) Close() error\n</code></pre> <p><code>Close</code> properly closes the watcher and its channels.</p>"},{"location":"api-reference/#eventfiltersetincludepatterns","title":"EventFilter.SetIncludePatterns","text":"<pre><code>func (f *EventFilter) SetIncludePatterns(patterns string)\n</code></pre> <p><code>SetIncludePatterns</code> sets the include patterns.</p>"},{"location":"api-reference/#eventfiltersetexcludepatterns","title":"EventFilter.SetExcludePatterns","text":"<pre><code>func (f *EventFilter) SetExcludePatterns(patterns string)\n</code></pre> <p><code>SetExcludePatterns</code> sets the exclude patterns.</p>"},{"location":"api-reference/#eventfiltersetincludeevents","title":"EventFilter.SetIncludeEvents","text":"<pre><code>func (f *EventFilter) SetIncludeEvents(events string)\n</code></pre> <p><code>SetIncludeEvents</code> sets the include event types.</p>"},{"location":"api-reference/#eventfiltersetignoreevents","title":"EventFilter.SetIgnoreEvents","text":"<pre><code>func (f *EventFilter) SetIgnoreEvents(events string)\n</code></pre> <p><code>SetIgnoreEvents</code> sets the ignore event types.</p>"},{"location":"api-reference/#eventfiltershouldinclude","title":"EventFilter.ShouldInclude","text":"<pre><code>func (f *EventFilter) ShouldInclude(event fsnotify.Event) bool\n</code></pre> <p><code>ShouldInclude</code> checks if an event should be included based on the filter.</p>"},{"location":"api-reference/#webhookmanagerhandleevent","title":"WebhookManager.HandleEvent","text":"<pre><code>func (m *WebhookManager) HandleEvent(event fsnotify.Event)\n</code></pre> <p><code>HandleEvent</code> handles a file system event.</p>"},{"location":"api-reference/#option-functions","title":"Option Functions","text":""},{"location":"api-reference/#withfilter","title":"WithFilter","text":"<pre><code>func WithFilter(filter *EventFilter) Option\n</code></pre> <p><code>WithFilter</code> creates an <code>Option</code> that sets the event filter.</p>"},{"location":"api-reference/#withwebhook","title":"WithWebhook","text":"<pre><code>func WithWebhook(url string, method string) Option\n</code></pre> <p><code>WithWebhook</code> creates an <code>Option</code> that configures a webhook.</p>"},{"location":"api-reference/#withwebhookheaders","title":"WithWebhookHeaders","text":"<pre><code>func WithWebhookHeaders(headers map[string]string) Option\n</code></pre> <p><code>WithWebhookHeaders</code> creates an <code>Option</code> that sets webhook headers.</p>"},{"location":"api-reference/#withwebhooktimeout","title":"WithWebhookTimeout","text":"<pre><code>func WithWebhookTimeout(timeout time.Duration) Option\n</code></pre> <p><code>WithWebhookTimeout</code> creates an <code>Option</code> that sets the webhook timeout.</p>"},{"location":"api-reference/#withwebhookdebounce","title":"WithWebhookDebounce","text":"<pre><code>func WithWebhookDebounce(duration time.Duration) Option\n</code></pre> <p><code>WithWebhookDebounce</code> creates an <code>Option</code> that sets the webhook debounce duration.</p>"},{"location":"api-reference/#withwebhookretries","title":"WithWebhookRetries","text":"<pre><code>func WithWebhookRetries(maxRetries int) Option\n</code></pre> <p><code>WithWebhookRetries</code> creates an <code>Option</code> that sets the maximum number of webhook retries.</p>"},{"location":"api-reference/#filteroption-functions","title":"FilterOption Functions","text":""},{"location":"api-reference/#withincludepatterns","title":"WithIncludePatterns","text":"<pre><code>func WithIncludePatterns(patterns string) FilterOption\n</code></pre> <p><code>WithIncludePatterns</code> creates a <code>FilterOption</code> that sets the include patterns.</p>"},{"location":"api-reference/#withexcludepatterns","title":"WithExcludePatterns","text":"<pre><code>func WithExcludePatterns(patterns string) FilterOption\n</code></pre> <p><code>WithExcludePatterns</code> creates a <code>FilterOption</code> that sets the exclude patterns.</p>"},{"location":"api-reference/#withincludeevents","title":"WithIncludeEvents","text":"<pre><code>func WithIncludeEvents(events string) FilterOption\n</code></pre> <p><code>WithIncludeEvents</code> creates a <code>FilterOption</code> that sets the include event types.</p>"},{"location":"api-reference/#withignoreevents","title":"WithIgnoreEvents","text":"<pre><code>func WithIgnoreEvents(events string) FilterOption\n</code></pre> <p><code>WithIgnoreEvents</code> creates a <code>FilterOption</code> that sets the ignore event types.</p>"},{"location":"changelog/","title":"Changelog","text":"<p>All notable changes to the Blink project will be documented in this file.</p> <p>The format is based on Keep a Changelog, and this project adheres to Semantic Versioning.</p>"},{"location":"changelog/#010-2025-03-08","title":"[0.1.0] - 2025-03-08","text":""},{"location":"changelog/#added","title":"Added","text":"<ul> <li>Initial release of Blink</li> <li>Recursive directory watching with symbolic link support</li> <li>Server-sent events (SSE) for real-time notifications</li> <li>Cross-origin resource sharing (CORS) support</li> <li>Event filtering by file patterns and event types</li> <li>Webhooks for integration with other systems</li> <li>High-performance design with worker pools and event debouncing</li> <li>Command-line interface with configuration management</li> <li>Configuration via YAML files, environment variables, and CLI flags</li> <li>Comprehensive documentation</li> <li>Example applications (CLI and web)</li> <li>Test suite with unit and integration tests</li> <li>Benchmarks for performance-critical functions</li> </ul>"},{"location":"changelog/#known-issues","title":"Known Issues","text":"<ul> <li>File deletion events may be reported as RENAME events on some platforms</li> <li>Large directory structures may require additional resources</li> </ul>"},{"location":"contributing/","title":"Contributing","text":"<p>Thank you for your interest in contributing to Blink! This document provides guidelines and instructions for contributing to the project.</p>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Please be respectful and considerate of others when contributing to this project. We expect all contributors to follow our Code of Conduct.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork to your local machine</li> <li>Create a new branch for your changes</li> <li>Make your changes</li> <li>Push your changes to your fork</li> <li>Submit a pull request</li> </ol>"},{"location":"contributing/#development-environment","title":"Development Environment","text":"<p>To set up your development environment:</p> <pre><code># Clone the repository\ngit clone https://github.com/TFMV/blink.git\n\n# Navigate to the repository\ncd blink\n\n# Install dependencies\ngo mod download\n\n# Build the binary\nmake build\n</code></pre>"},{"location":"contributing/#project-structure","title":"Project Structure","text":"<p>The project is organized as follows:</p> <ul> <li><code>cmd/blink/</code>: Contains the CLI application</li> <li><code>cmd/</code>: Contains the Cobra command definitions</li> <li><code>main.go</code>: Entry point for the CLI</li> <li><code>pkg/blink/</code>: Contains the library code</li> <li><code>blink.go</code>: Core functionality</li> <li><code>filter.go</code>: Event filtering</li> <li><code>server.go</code>: SSE server</li> <li><code>webhook.go</code>: Webhook functionality</li> <li><code>sub.go</code>: Directory scanning</li> <li><code>time.go</code>: Time-related utilities</li> <li><code>examples/</code>: Contains example applications</li> <li><code>docs/</code>: Contains documentation</li> </ul>"},{"location":"contributing/#testing","title":"Testing","text":"<p>Before submitting a pull request, please run the tests:</p> <pre><code># Run all tests\nmake test\n\n# Run tests without integration tests\nmake test-short\n\n# Run benchmarks\nmake benchmark\n\n# Generate test coverage\nmake coverage\n</code></pre>"},{"location":"contributing/#coding-style","title":"Coding Style","text":"<p>We follow the standard Go coding style. Please run <code>gofmt</code> on your code before submitting a pull request:</p> <pre><code># Format all Go files\ngofmt -s -w .\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":"<p>Please update the documentation when adding or changing features. The documentation is written in Markdown and is located in the <code>docs/</code> directory.</p>"},{"location":"contributing/#pull-request-process","title":"Pull Request Process","text":"<ol> <li>Ensure your code passes all tests</li> <li>Update the documentation if necessary</li> <li>Update the CHANGELOG.md file if necessary</li> <li>Submit a pull request with a clear description of the changes</li> </ol>"},{"location":"contributing/#release-process","title":"Release Process","text":"<ol> <li>Update the version number in <code>cmd/blink/cmd/version.go</code></li> <li>Update the CHANGELOG.md file</li> <li>Create a new tag with the version number</li> <li>Push the tag to GitHub</li> <li>Create a new release on GitHub</li> </ol>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to this project, you agree that your contributions will be licensed under the project's license.</p>"},{"location":"advanced/architecture/","title":"Architecture","text":"<p>This page describes the architecture of Blink, including its components and how they interact.</p>"},{"location":"advanced/architecture/#overview","title":"Overview","text":"<p>Blink is designed with a modular architecture that separates concerns and allows for flexibility in how it's used. The main components are:</p> <ol> <li>Watcher: Monitors directories for changes with improved performance</li> <li>Event Batcher: Batches events to reduce processing overhead</li> <li>Event Filter: Filters events based on patterns and types</li> <li>Event Server: Serves events via SSE</li> <li>Webhook Manager: Sends webhooks when events occur</li> <li>CLI: Provides a command-line interface</li> </ol>"},{"location":"advanced/architecture/#component-diagram","title":"Component Diagram","text":"<pre><code>+------------------+     +------------------+\n|   File System    | --&gt; |     Watcher      |\n+------------------+     +------------------+\n                              |\n                              v\n+------------------+     +------------------+\n|  Event Batcher   | --&gt; |   Event Filter   |\n+------------------+     +------------------+\n                              |\n                              v\n+------------------+     +------------------+\n|   Event Server   | --&gt; |   SSE Stream     |\n+------------------+     +------------------+\n        |\n        v\n+------------------+     +------------------+\n| Webhook Manager  |     |       CLI        |\n+------------------+     +------------------+\n</code></pre>"},{"location":"advanced/architecture/#components","title":"Components","text":""},{"location":"advanced/architecture/#watcher","title":"Watcher","text":"<p>The <code>Watcher</code> is responsible for watching directories for changes with improved performance and reliability. It uses the <code>fsnotify</code> package to receive file system events and provides them to other components.</p> <p>Key features:</p> <ul> <li>Event batching for improved performance</li> <li>Separate file and directory event handling</li> <li>Configurable batching delay</li> <li>Periodic polling for new files</li> <li>Recursive directory watching</li> <li>Symbolic link support</li> </ul>"},{"location":"advanced/architecture/#event-batcher","title":"Event Batcher","text":"<p>The <code>EventBatcher</code> is responsible for batching file system events to reduce redundant processing. It groups related events together and sends them as a batch after a configurable delay.</p> <p>Key features:</p> <ul> <li>Configurable batching delay</li> <li>Thread-safe event collection</li> <li>Efficient event delivery</li> <li>Reduced processing overhead</li> </ul>"},{"location":"advanced/architecture/#event-filter","title":"Event Filter","text":"<p>The <code>EventFilter</code> is responsible for filtering events based on file patterns and event types. It allows users to focus on specific files or event types.</p> <p>Key features:</p> <ul> <li>File pattern filtering (include/exclude)</li> <li>Event type filtering (include/ignore)</li> <li>Efficient pattern matching</li> <li>Combined path and event type filtering</li> </ul>"},{"location":"advanced/architecture/#event-server","title":"Event Server","text":"<p>The <code>EventServer</code> is responsible for serving events via Server-Sent Events (SSE). It provides a real-time stream of file system events to clients.</p> <p>Key features:</p> <ul> <li>SSE protocol support</li> <li>CORS support</li> <li>Efficient event delivery</li> <li>Integration with the watcher</li> </ul>"},{"location":"advanced/architecture/#webhook-manager","title":"Webhook Manager","text":"<p>The <code>WebhookManager</code> is responsible for sending webhooks when events occur. It allows integration with other systems.</p> <p>Key features:</p> <ul> <li>HTTP webhook support</li> <li>Custom headers</li> <li>Retries and timeouts</li> <li>Event debouncing</li> </ul>"},{"location":"advanced/architecture/#cli","title":"CLI","text":"<p>The CLI provides a command-line interface for using Blink. It allows users to configure and run Blink from the command line.</p> <p>Key features:</p> <ul> <li>Command-line flags</li> <li>Configuration management</li> <li>Subcommands</li> </ul>"},{"location":"advanced/architecture/#data-flow","title":"Data Flow","text":"<ol> <li>The <code>Watcher</code> receives file system events from the operating system.</li> <li>Events are batched by the <code>EventBatcher</code> to reduce processing overhead.</li> <li>Batched events are passed to the <code>EventFilter</code> to determine if they should be processed.</li> <li>If events pass the filter, they're sent to the <code>EventServer</code> and/or <code>WebhookManager</code>.</li> <li>The <code>EventServer</code> sends the events to connected clients via SSE.</li> <li>The <code>WebhookManager</code> sends the events to configured webhook endpoints via HTTP.</li> </ol>"},{"location":"advanced/architecture/#configuration","title":"Configuration","text":"<p>Blink's configuration is managed by the <code>viper</code> package, which provides a flexible configuration system with support for:</p> <ul> <li>Command-line flags</li> <li>Environment variables</li> <li>Configuration files</li> <li>Default values</li> </ul>"},{"location":"advanced/architecture/#error-handling","title":"Error Handling","text":"<p>Blink uses a combination of error logging and error channels to handle errors:</p> <ul> <li>The <code>Watcher</code> provides an error channel for receiving file system errors.</li> <li>The <code>LogError</code> function is used for logging errors.</li> <li>The <code>FatalExit</code> function is used for fatal errors that should terminate the program.</li> </ul>"},{"location":"advanced/architecture/#performance-considerations","title":"Performance Considerations","text":"<p>Blink is designed for high performance, with several optimizations:</p> <ul> <li>Event batching to reduce processing overhead</li> <li>Separate file and directory event handling</li> <li>Configurable batching delay for different workflows</li> <li>Periodic polling for new files</li> <li>Non-blocking channel operations</li> <li>Efficient memory usage with periodic cleanup</li> </ul>"},{"location":"advanced/benchmarking/","title":"Benchmarking","text":"<p>Blink includes benchmarks to measure the performance of critical functions. This page describes how to run the benchmarks and how to interpret the results.</p>"},{"location":"advanced/benchmarking/#running-benchmarks","title":"Running Benchmarks","text":"<p>You can run the benchmarks using the Makefile:</p> <pre><code># Run benchmarks\nmake benchmark\n</code></pre> <p>Or you can use the Go test command directly:</p> <pre><code># Run benchmarks\ngo test -v -bench=. -benchmem ./...\n\n# Run benchmarks for a specific package\ngo test -v -bench=. -benchmem ./pkg/blink\n\n# Run a specific benchmark\ngo test -v -bench=BenchmarkShouldIgnoreFile -benchmem ./pkg/blink\n</code></pre>"},{"location":"advanced/benchmarking/#benchmark-results","title":"Benchmark Results","text":"<p>The benchmark results include:</p> <ul> <li>Operations per Second: How many operations the function can perform per second</li> <li>Time per Operation: How long each operation takes</li> <li>Memory Allocation: How much memory is allocated per operation</li> <li>Allocations per Operation: How many memory allocations are made per operation</li> </ul> <p>Example benchmark results:</p> <pre><code>BenchmarkShouldIgnoreFile-10            39295886                30.57 ns/op            0 B/op          0 allocs/op\nBenchmarkSubfolders-10                       144           7940372 ns/op          708393 B/op       4614 allocs/op\nBenchmarkRemoveOldEvents-10                10000            121779 ns/op          298686 B/op         20 allocs/op\n</code></pre> <p>In this example:</p> <ul> <li><code>BenchmarkShouldIgnoreFile-10</code>: The benchmark for the <code>ShouldIgnoreFile</code> function, running on 10 CPUs</li> <li><code>39295886</code>: The number of iterations the benchmark ran</li> <li><code>30.57 ns/op</code>: Each operation took 30.57 nanoseconds</li> <li><code>0 B/op</code>: No memory was allocated per operation</li> <li><code>0 allocs/op</code>: No memory allocations were made per operation</li> </ul>"},{"location":"advanced/benchmarking/#benchmark-functions","title":"Benchmark Functions","text":"<p>Blink includes the following benchmark functions:</p>"},{"location":"advanced/benchmarking/#benchmarkshouldignorefile","title":"BenchmarkShouldIgnoreFile","text":"<p>Benchmarks the <code>ShouldIgnoreFile</code> function, which determines if a file should be ignored based on its name.</p> <pre><code>func BenchmarkShouldIgnoreFile(b *testing.B) {\n filenames := []string{\n  \"file.txt\",\n  \".hidden\",\n  \"_temp\",\n  \"dir\",\n  \".git\",\n  \"_build\",\n }\n\n b.ResetTimer()\n for i := 0; i &lt; b.N; i++ {\n  for _, filename := range filenames {\n   ShouldIgnoreFile(filename)\n  }\n }\n}\n</code></pre>"},{"location":"advanced/benchmarking/#benchmarksubfolders","title":"BenchmarkSubfolders","text":"<p>Benchmarks the <code>Subfolders</code> function, which returns a list of all subdirectories in a given path.</p> <pre><code>func BenchmarkSubfolders(b *testing.B) {\n // Create a temporary directory structure for benchmarking\n tempDir, err := ioutil.TempDir(\"\", \"blink-bench-\")\n if err != nil {\n  b.Fatalf(\"Failed to create temp dir: %v\", err)\n }\n defer os.RemoveAll(tempDir)\n\n // Create a directory structure with 5 levels and 3 directories per level\n createDirTree(b, tempDir, 5, 3)\n\n b.ResetTimer()\n for i := 0; i &lt; b.N; i++ {\n  Subfolders(tempDir)\n }\n}\n</code></pre>"},{"location":"advanced/benchmarking/#benchmarkremoveoldevents","title":"BenchmarkRemoveOldEvents","text":"<p>Benchmarks the <code>RemoveOldEvents</code> function, which removes old events from a <code>TimeEventMap</code>.</p> <pre><code>func BenchmarkRemoveOldEvents(b *testing.B) {\n // Create a TimeEventMap with a large number of events\n events := make(TimeEventMap)\n now := time.Now()\n\n // Add 1000 events at different times\n for i := 0; i &lt; 1000; i++ {\n  events[now.Add(-time.Duration(i)*time.Minute)] = Event{}\n }\n\n // Benchmark removing events older than 500 minutes\n maxAge := 500 * time.Minute\n b.ResetTimer()\n for i := 0; i &lt; b.N; i++ {\n  // Create a copy of the events map for each iteration\n  eventsCopy := make(TimeEventMap)\n  for k, v := range events {\n   eventsCopy[k] = v\n  }\n  RemoveOldEvents(&amp;eventsCopy, maxAge)\n }\n}\n</code></pre>"},{"location":"advanced/benchmarking/#writing-benchmarks","title":"Writing Benchmarks","text":"<p>When writing benchmarks for Blink, follow these guidelines:</p> <ol> <li>Reset Timer: Use <code>b.ResetTimer()</code> before the benchmark loop to exclude setup time</li> <li>Benchmark Memory: Use the <code>-benchmem</code> flag to measure memory usage</li> <li>Benchmark Realistic Scenarios: Benchmark realistic scenarios with realistic data</li> <li>Benchmark Critical Functions: Focus on performance-critical functions</li> <li>Benchmark Edge Cases: Benchmark edge cases and worst-case scenarios</li> </ol>"},{"location":"advanced/benchmarking/#example-benchmark","title":"Example Benchmark","text":"<p>Here's an example of a good benchmark:</p> <pre><code>func BenchmarkEventFilter(b *testing.B) {\n // Create a filter\n filter := NewEventFilter()\n filter.SetIncludePatterns(\"*.js,*.css,*.html\")\n filter.SetExcludePatterns(\"node_modules,*.tmp\")\n filter.SetIncludeEvents(\"write,create\")\n filter.SetIgnoreEvents(\"chmod\")\n\n // Create events\n events := []fsnotify.Event{\n  {Name: \"file.js\", Op: fsnotify.Write},\n  {Name: \"file.css\", Op: fsnotify.Create},\n  {Name: \"file.html\", Op: fsnotify.Chmod},\n  {Name: \"file.tmp\", Op: fsnotify.Write},\n  {Name: \"node_modules/file.js\", Op: fsnotify.Write},\n }\n\n b.ResetTimer()\n for i := 0; i &lt; b.N; i++ {\n  for _, event := range events {\n   filter.ShouldInclude(event)\n  }\n }\n}\n</code></pre>"},{"location":"advanced/benchmarking/#performance-profiling","title":"Performance Profiling","text":"<p>In addition to benchmarks, you can use Go's profiling tools to analyze performance:</p> <pre><code># CPU profiling\ngo test -cpuprofile=cpu.prof -bench=. ./pkg/blink\n\n# Memory profiling\ngo test -memprofile=mem.prof -bench=. ./pkg/blink\n\n# Block profiling\ngo test -blockprofile=block.prof -bench=. ./pkg/blink\n</code></pre> <p>You can then analyze the profiles with:</p> <pre><code>go tool pprof cpu.prof\ngo tool pprof mem.prof\ngo tool pprof block.prof\n</code></pre>"},{"location":"advanced/benchmarking/#performance-goals","title":"Performance Goals","text":"<p>Blink aims to be high-performance, with the following goals:</p> <ul> <li>Low Latency: Events should be delivered with low latency</li> <li>High Throughput: Blink should handle a high rate of events</li> <li>Low Memory Usage: Blink should use memory efficiently</li> <li>Low CPU Usage: Blink should use CPU efficiently</li> </ul> <p>The benchmarks help ensure that these goals are met and that performance regressions are caught early.</p>"},{"location":"advanced/testing/","title":"Testing","text":"<p>Blink includes a comprehensive test suite to ensure reliability and correctness. This page describes how to run the tests and how to write new tests.</p>"},{"location":"advanced/testing/#running-tests","title":"Running Tests","text":"<p>You can run the tests using the Makefile:</p> <pre><code># Run all tests\nmake test\n\n# Run tests without integration tests\nmake test-short\n\n# Generate test coverage\nmake coverage\n</code></pre> <p>Or you can use the Go test command directly:</p> <pre><code># Run all tests\ngo test -v ./...\n\n# Run tests without integration tests\ngo test -v -short ./...\n\n# Generate test coverage\ngo test -coverprofile=coverage.out ./...\ngo tool cover -html=coverage.out\n</code></pre>"},{"location":"advanced/testing/#test-structure","title":"Test Structure","text":"<p>The tests are organized as follows:</p> <ul> <li>Unit Tests: Test individual functions and methods</li> <li>Integration Tests: Test the interaction between components</li> <li>Benchmarks: Measure the performance of critical functions</li> </ul>"},{"location":"advanced/testing/#unit-tests","title":"Unit Tests","text":"<p>Unit tests are located in the same package as the code they test, with a <code>_test.go</code> suffix. For example, the tests for <code>blink.go</code> are in <code>blink_test.go</code>.</p> <p>Example unit test:</p> <pre><code>func TestShouldIgnoreFile(t *testing.T) {\n tests := []struct {\n  name     string\n  filename string\n  want     bool\n }{\n  {\"Normal file\", \"file.txt\", false},\n  {\"Hidden file\", \".hidden\", true},\n  {\"Underscore file\", \"_temp\", true},\n  {\"Normal directory\", \"dir\", false},\n  {\"Hidden directory\", \".git\", true},\n  {\"Underscore directory\", \"_build\", true},\n }\n\n for _, tt := range tests {\n  t.Run(tt.name, func(t *testing.T) {\n   if got := ShouldIgnoreFile(tt.filename); got != tt.want {\n    t.Errorf(\"ShouldIgnoreFile(%q) = %v, want %v\", tt.filename, got, tt.want)\n   }\n  })\n }\n}\n</code></pre>"},{"location":"advanced/testing/#integration-tests","title":"Integration Tests","text":"<p>Integration tests test the interaction between components. They are also located in <code>_test.go</code> files, but they test multiple components together.</p> <p>Example integration test:</p> <pre><code>func TestEventServer(t *testing.T) {\n // Skip in short mode as this is an integration test\n if testing.Short() {\n  t.Skip(\"Skipping integration test in short mode\")\n }\n\n // Create a temporary directory for testing\n tempDir, err := ioutil.TempDir(\"\", \"blink-server-test-\")\n if err != nil {\n  t.Fatalf(\"Failed to create temp dir: %v\", err)\n }\n defer os.RemoveAll(tempDir)\n\n // Start the event server in a goroutine\n go func() {\n  EventServer(\n   tempDir,\n   \"*\",\n   \":0\", // Use port 0 to get a random available port\n   \"/events\",\n   100*time.Millisecond,\n  )\n }()\n\n // Give the server time to start\n time.Sleep(500 * time.Millisecond)\n\n // Create a file in the watched directory to trigger an event\n testFile := filepath.Join(tempDir, \"test.txt\")\n if err := ioutil.WriteFile(testFile, []byte(\"test\"), 0644); err != nil {\n  t.Fatalf(\"Failed to create test file: %v\", err)\n }\n\n // Wait for the event to be processed\n time.Sleep(200 * time.Millisecond)\n}\n</code></pre>"},{"location":"advanced/testing/#benchmarks","title":"Benchmarks","text":"<p>Benchmarks measure the performance of critical functions. They are located in <code>_test.go</code> files with a <code>Benchmark</code> prefix.</p> <p>Example benchmark:</p> <pre><code>func BenchmarkShouldIgnoreFile(b *testing.B) {\n filenames := []string{\n  \"file.txt\",\n  \".hidden\",\n  \"_temp\",\n  \"dir\",\n  \".git\",\n  \"_build\",\n }\n\n b.ResetTimer()\n for i := 0; i &lt; b.N; i++ {\n  for _, filename := range filenames {\n   ShouldIgnoreFile(filename)\n  }\n }\n}\n</code></pre>"},{"location":"advanced/testing/#writing-tests","title":"Writing Tests","text":"<p>When writing tests for Blink, follow these guidelines:</p> <ol> <li>Test Coverage: Aim for high test coverage, especially for critical functions</li> <li>Test Edge Cases: Test edge cases and error conditions</li> <li>Test Performance: Write benchmarks for performance-critical functions</li> <li>Test Integration: Write integration tests for component interactions</li> <li>Test Isolation: Tests should be isolated and not depend on each other</li> <li>Test Readability: Tests should be readable and maintainable</li> </ol>"},{"location":"advanced/testing/#example-test","title":"Example Test","text":"<p>Here's an example of a good test:</p> <pre><code>func TestRemoveOldEvents(t *testing.T) {\n // Create a TimeEventMap with events at different times\n events := make(TimeEventMap)\n now := time.Now()\n\n // Add events at different times\n events[now.Add(-10*time.Minute)] = Event{}\n events[now.Add(-5*time.Minute)] = Event{}\n events[now.Add(-1*time.Minute)] = Event{}\n events[now] = Event{}\n\n // Remove events older than 2 minutes\n maxAge := 2 * time.Minute\n RemoveOldEvents(&amp;events, maxAge)\n\n // Check that only the recent events remain\n if len(events) != 2 {\n  t.Errorf(\"Expected 2 events after removal, got %d\", len(events))\n }\n\n // Check that the old events were removed\n for timestamp := range events {\n  if now.Sub(timestamp) &gt; maxAge {\n   t.Errorf(\"Event at %v should have been removed (older than %v)\", timestamp, maxAge)\n  }\n }\n}\n</code></pre>"},{"location":"advanced/testing/#test-coverage","title":"Test Coverage","text":"<p>Blink aims for high test coverage. You can check the current test coverage with:</p> <pre><code>make coverage\n</code></pre> <p>This will generate a coverage report and open it in your browser.</p>"},{"location":"advanced/testing/#continuous-integration","title":"Continuous Integration","text":"<p>Blink uses continuous integration to run tests automatically on every pull request and push to the main branch. This ensures that the code always passes tests and maintains quality.</p>"},{"location":"features/event-filtering/","title":"Event Filtering","text":"<p>Blink provides powerful filtering capabilities to focus on specific files or event types. This can be useful to reduce noise and only receive notifications for the changes you care about.</p>"},{"location":"features/event-filtering/#improved-filtering","title":"Improved Filtering","text":"<p>Blink includes an advanced filtering system that provides more precise control over which events are processed:</p> <ul> <li>Improved Pattern Matching: Better file path matching with glob patterns</li> <li>Combined Event and Path Filtering: Single-pass filtering for better performance</li> <li>Optimized Filter Application: Filters are applied at the watcher level for efficiency</li> <li>Separate File and Directory Handling: Different filtering rules can be applied to files and directories</li> </ul>"},{"location":"features/event-filtering/#file-pattern-filtering","title":"File Pattern Filtering","text":"<p>You can filter events based on file patterns using the <code>--include</code> and <code>--exclude</code> flags:</p> <pre><code># Only watch for changes to JavaScript, CSS, and HTML files\nblink --include \"*.js,*.css,*.html\"\n\n# Ignore node_modules directory and temporary files\nblink --exclude \"node_modules,*.tmp\"\n\n# Combine include and exclude patterns\nblink --include \"*.js,*.css,*.html\" --exclude \"node_modules,*.tmp\"\n</code></pre>"},{"location":"features/event-filtering/#include-patterns","title":"Include Patterns","text":"<p>The <code>--include</code> flag specifies patterns for files that should be included in the watch list. Only files matching these patterns will trigger events.</p> <p>Patterns are comma-separated and support the following wildcards:</p> <ul> <li><code>*</code>: Matches any sequence of non-separator characters</li> <li><code>?</code>: Matches any single non-separator character</li> <li><code>[...]</code>: Matches any character in the set</li> <li><code>[^...]</code>: Matches any character not in the set</li> </ul> <p>Examples:</p> <ul> <li><code>*.js</code>: All JavaScript files</li> <li><code>src/*.js</code>: JavaScript files in the src directory</li> <li><code>*.{js,css,html}</code>: JavaScript, CSS, and HTML files</li> <li><code>[a-z]*.js</code>: JavaScript files starting with a lowercase letter</li> </ul>"},{"location":"features/event-filtering/#exclude-patterns","title":"Exclude Patterns","text":"<p>The <code>--exclude</code> flag specifies patterns for files that should be excluded from the watch list. Files matching these patterns will not trigger events.</p> <p>Exclude patterns have the same format as include patterns.</p> <p>Examples:</p> <ul> <li><code>node_modules</code>: The node_modules directory</li> <li><code>*.tmp</code>: Temporary files</li> <li><code>*.{log,tmp,bak}</code>: Log, temporary, and backup files</li> <li><code>.*</code>: Hidden files (starting with a dot)</li> </ul>"},{"location":"features/event-filtering/#event-type-filtering","title":"Event Type Filtering","text":"<p>You can filter events based on their type using the <code>--events</code> and <code>--ignore</code> flags:</p> <pre><code># Only trigger on write and create events\nblink --events \"write,create\"\n\n# Ignore chmod events\nblink --ignore \"chmod\"\n\n# Combine event type filters\nblink --events \"write,create\" --ignore \"chmod\"\n</code></pre>"},{"location":"features/event-filtering/#available-event-types","title":"Available Event Types","text":"<p>Blink supports the following event types:</p> <ul> <li><code>create</code>: File or directory creation</li> <li><code>write</code>: File modification</li> <li><code>remove</code>: File or directory removal</li> <li><code>rename</code>: File or directory renaming</li> <li><code>chmod</code>: Permission changes</li> </ul> <p>Note</p> <p>On some platforms, file deletion events may be reported as <code>rename</code> events due to limitations in the underlying file system notification APIs.</p>"},{"location":"features/event-filtering/#using-filters-with-the-watcher","title":"Using Filters with the Watcher","text":"<p>The watcher applies filters more efficiently by:</p> <ol> <li>Checking exclude patterns first for better performance</li> <li>Applying path filters before event type filters</li> <li>Optimizing pattern matching for common use cases</li> <li>Handling directory events separately from file events</li> </ol> <p>This results in better performance, especially for large directory structures with many files.</p>"},{"location":"features/event-filtering/#using-filters-in-the-go-library","title":"Using Filters in the Go Library","text":"<p>If you're using Blink as a library in your Go projects, you can use the filtering API with the watcher:</p> <pre><code>import (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Create a filter\n    filter := blink.NewEventFilter()\n\n    // Set include patterns\n    filter.SetIncludePatterns(\"*.js,*.css,*.html\")\n\n    // Set exclude patterns\n    filter.SetExcludePatterns(\"node_modules,*.tmp\")\n\n    // Set include event types\n    filter.SetIncludeEvents(\"write,create\")\n\n    // Set ignore event types\n    filter.SetIgnoreEvents(\"chmod\")\n\n    // Create watcher configuration\n    config := blink.WatcherConfig{\n        RootPath:        \".\",\n        Recursive:       true,\n        HandlerDelay:    100 * time.Millisecond,\n        PollInterval:    4 * time.Second,\n        IncludePatterns: []string{\"*.js\", \"*.css\", \"*.html\"},\n        ExcludePatterns: []string{\"node_modules\", \"*.tmp\"},\n        IncludeEvents:   []string{\"write\", \"create\"},\n        IgnoreEvents:    []string{\"chmod\"},\n    }\n\n    // Create watcher\n    watcher, err := blink.NewWatcher(config)\n    if err != nil {\n        panic(err)\n    }\n\n    // Start the watcher\n    watcher.Start()\n\n    // Process events\n    for {\n        select {\n        case eventBatch := &lt;-watcher.Events():\n            // Process batch of events\n            for _, event := range eventBatch {\n                fmt.Println(\"Event:\", event)\n            }\n        case err := &lt;-watcher.Errors():\n            fmt.Println(\"Error:\", err)\n        }\n    }\n}\n</code></pre>"},{"location":"features/performance/","title":"Performance","text":"<p>Blink is designed for high performance, with several optimizations to ensure efficient file system monitoring even for large directory structures.</p>"},{"location":"features/performance/#performance-features","title":"Performance Features","text":""},{"location":"features/performance/#watcher","title":"Watcher","text":"<p>Blink includes a high-performance watcher implementation that significantly improves performance and reliability:</p> <ul> <li>Event Batching: Groups related events together to reduce processing overhead</li> <li>Configurable Delay: Adjustable batching delay (default: 100ms) to optimize for different editors and workflows</li> <li>Separate File/Directory Handling: Specialized processing for file and directory events</li> <li>Periodic Polling: Automatically detects new files that might have been created outside the watch system</li> </ul>"},{"location":"features/performance/#parallel-directory-scanning","title":"Parallel Directory Scanning","text":"<p>Blink uses worker pools to scan directories in parallel, which significantly improves performance when watching large directory structures:</p> <ul> <li>Uses a number of workers based on available CPU cores</li> <li>Distributes directory scanning work across multiple goroutines</li> <li>Caps the number of workers to avoid excessive resource usage</li> </ul>"},{"location":"features/performance/#event-debouncing","title":"Event Debouncing","text":"<p>To reduce the number of events and avoid overwhelming consumers, Blink implements event debouncing:</p> <ul> <li>Groups multiple events for the same file within a short time window</li> <li>Only sends one event per file within the debounce duration</li> <li>Configurable debounce duration for webhooks</li> <li>Smart batching for editors like Vim that generate multiple events when saving files</li> </ul>"},{"location":"features/performance/#non-blocking-channel-operations","title":"Non-blocking Channel Operations","text":"<p>Blink uses non-blocking channel operations to prevent goroutines from getting stuck:</p> <ul> <li>Uses buffered channels to handle bursts of events</li> <li>Implements select statements with default cases to avoid blocking</li> <li>Logs dropped events when channels are full</li> </ul>"},{"location":"features/performance/#efficient-memory-usage","title":"Efficient Memory Usage","text":"<p>Blink is designed to be memory-efficient, with several features to minimize memory usage:</p> <ul> <li>Periodically cleans up old events to prevent memory leaks</li> <li>Uses a map to track recent events for debouncing</li> <li>Implements efficient data structures for event tracking</li> </ul>"},{"location":"features/performance/#benchmarks","title":"Benchmarks","text":"<p>Blink includes benchmarks to measure performance of critical functions:</p> <pre><code># Run benchmarks\nmake benchmark\n</code></pre> <p>Benchmark results show excellent performance:</p> <ul> <li><code>ShouldIgnoreFile</code>: ~30.57 ns/op, 0 B/op, 0 allocs/op</li> <li><code>RemoveOldEvents</code>: ~121779 ns/op for 1000 events</li> <li><code>Subfolders</code>: Fast directory scanning with optimized memory usage</li> </ul>"},{"location":"features/performance/#performance-tips","title":"Performance Tips","text":""},{"location":"features/performance/#optimizing-event-batching","title":"Optimizing Event Batching","text":"<p>You can optimize event batching for your specific use case:</p> <pre><code># Set a custom batching delay (in milliseconds)\nblink --batch-delay 200\n</code></pre>"},{"location":"features/performance/#cpu-usage","title":"CPU Usage","text":"<p>You can control CPU usage with the <code>--max-procs</code> flag:</p> <pre><code># Limit to 4 CPUs\nblink --max-procs 4\n</code></pre>"},{"location":"features/performance/#memory-usage","title":"Memory Usage","text":"<p>To reduce memory usage, consider:</p> <ul> <li>Using event filtering to reduce the number of events</li> <li>Setting a shorter refresh duration to clean up old events more frequently</li> <li>Using webhooks with debouncing to reduce the number of HTTP requests</li> </ul>"},{"location":"features/performance/#large-directory-structures","title":"Large Directory Structures","text":"<p>When watching large directory structures:</p> <ul> <li>Use the <code>--exclude</code> flag to ignore directories you don't need to watch</li> <li>Consider watching specific subdirectories instead of the entire structure</li> <li>Use a longer refresh duration to reduce the frequency of event processing</li> </ul>"},{"location":"features/performance/#high-event-rates","title":"High Event Rates","text":"<p>For high event rates:</p> <ul> <li>Use event filtering to focus on specific files or event types</li> <li>Implement debouncing for webhooks</li> <li>Consider using a custom consumer that can handle high event rates</li> <li>Adjust the event batching delay to balance responsiveness and efficiency</li> </ul>"},{"location":"features/webhooks/","title":"Webhooks","text":"<p>Blink can send webhooks when file changes occur, allowing integration with other systems. This is useful for triggering builds, running tests, sending notifications, or any other action you want to perform when files change.</p>"},{"location":"features/webhooks/#basic-usage","title":"Basic Usage","text":"<p>To send webhooks, use the <code>--webhook-url</code> flag:</p> <pre><code>blink --webhook-url \"https://example.com/webhook\"\n</code></pre> <p>This will send a POST request to the specified URL whenever a file changes.</p>"},{"location":"features/webhooks/#webhook-payload","title":"Webhook Payload","text":"<p>The webhook payload is a JSON object with the following fields:</p> <pre><code>{\n  \"path\": \"/path/to/changed/file.js\",\n  \"event_type\": \"write\",\n  \"time\": \"2023-03-08T12:34:56.789Z\"\n}\n</code></pre> <ul> <li><code>path</code>: The path of the file that changed</li> <li><code>event_type</code>: The type of event (create, write, remove, rename, chmod)</li> <li><code>time</code>: The time the event occurred (ISO 8601 format)</li> </ul>"},{"location":"features/webhooks/#customizing-webhooks","title":"Customizing Webhooks","text":""},{"location":"features/webhooks/#http-method","title":"HTTP Method","text":"<p>By default, webhooks are sent using the POST method. You can specify a different method using the <code>--webhook-method</code> flag:</p> <pre><code>blink --webhook-url \"https://example.com/webhook\" --webhook-method \"PUT\"\n</code></pre>"},{"location":"features/webhooks/#headers","title":"Headers","text":"<p>You can add custom headers to webhook requests using the <code>--webhook-headers</code> flag:</p> <pre><code>blink --webhook-url \"https://example.com/webhook\" --webhook-headers \"Authorization:Bearer token,Content-Type:application/json\"\n</code></pre> <p>Headers are specified as a comma-separated list of key-value pairs, where each pair is separated by a colon.</p>"},{"location":"features/webhooks/#timeout","title":"Timeout","text":"<p>You can set a timeout for webhook requests using the <code>--webhook-timeout</code> flag:</p> <pre><code>blink --webhook-url \"https://example.com/webhook\" --webhook-timeout 10s\n</code></pre> <p>The timeout is specified as a duration (e.g., <code>5s</code>, <code>1m</code>, <code>500ms</code>).</p>"},{"location":"features/webhooks/#retries","title":"Retries","text":"<p>By default, Blink will retry failed webhook requests up to 3 times. You can change this using the <code>--webhook-max-retries</code> flag:</p> <pre><code>blink --webhook-url \"https://example.com/webhook\" --webhook-max-retries 5\n</code></pre>"},{"location":"features/webhooks/#debouncing","title":"Debouncing","text":"<p>To reduce the number of webhook requests, you can debounce them using the <code>--webhook-debounce-duration</code> flag:</p> <pre><code>blink --webhook-url \"https://example.com/webhook\" --webhook-debounce-duration 500ms\n</code></pre> <p>This will ensure that only one webhook is sent for each file within the specified duration, even if multiple events occur.</p>"},{"location":"features/webhooks/#filtering-webhooks","title":"Filtering Webhooks","text":"<p>You can combine webhooks with event filtering to only send webhooks for specific files or event types:</p> <pre><code># Only send webhooks for changes to JavaScript files\nblink --webhook-url \"https://example.com/webhook\" --include \"*.js\"\n\n# Only send webhooks for write events\nblink --webhook-url \"https://example.com/webhook\" --events \"write\"\n\n# Complex webhook filtering\nblink --webhook-url \"https://example.com/webhook\" --include \"*.js\" --events \"write\"\n</code></pre>"},{"location":"features/webhooks/#using-webhooks-in-the-go-library","title":"Using Webhooks in the Go Library","text":"<p>If you're using Blink as a library in your Go projects, you can use the webhook API:</p> <pre><code>import (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Start the event server with webhooks\n    blink.EventServer(\n        \".\",                  // Directory to watch\n        \"*\",                  // Allow all origins\n        \":12345\",             // Listen on port 12345\n        \"/events\",            // Event path\n        100*time.Millisecond, // Refresh duration\n        // Webhook options\n        blink.WithWebhook(\"https://example.com/webhook\", \"POST\"),\n        blink.WithWebhookHeaders(map[string]string{\n            \"Authorization\": \"Bearer token\",\n            \"Content-Type\": \"application/json\",\n        }),\n        blink.WithWebhookTimeout(10*time.Second),\n        blink.WithWebhookDebounce(500*time.Millisecond),\n        blink.WithWebhookRetries(5),\n    )\n\n    select {}\n}\n</code></pre>"},{"location":"features/webhooks/#example-use-cases","title":"Example Use Cases","text":""},{"location":"features/webhooks/#triggering-cicd-pipelines","title":"Triggering CI/CD Pipelines","text":"<p>You can use webhooks to trigger CI/CD pipelines when code changes:</p> <pre><code>blink --webhook-url \"https://jenkins.example.com/job/my-project/build\" --include \"*.go\" --events \"write\"\n</code></pre>"},{"location":"features/webhooks/#sending-slack-notifications","title":"Sending Slack Notifications","text":"<p>You can send notifications to Slack when important files change:</p> <pre><code>blink --webhook-url \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\" --include \"config.yaml,*.env\" --events \"write\"\n</code></pre>"},{"location":"features/webhooks/#running-tests","title":"Running Tests","text":"<p>You can run tests when test files change:</p> <pre><code>blink --webhook-url \"http://localhost:8080/run-tests\" --include \"*_test.go\" --events \"write\"\n</code></pre>"},{"location":"features/webhooks/#reloading-web-servers","title":"Reloading Web Servers","text":"<p>You can reload web servers when configuration files change:</p> <pre><code>blink --webhook-url \"http://localhost:8080/reload\" --include \"nginx.conf,*.conf\" --events \"write\"\n</code></pre>"},{"location":"getting-started/configuration/","title":"Configuration","text":"<p>Blink offers flexible configuration options through command-line flags, environment variables, and configuration files.</p>"},{"location":"getting-started/configuration/#configuration-methods","title":"Configuration Methods","text":"<p>Blink supports three methods of configuration, in order of precedence (highest to lowest):</p> <ol> <li>Command-line flags</li> <li>Environment variables</li> <li>Configuration file</li> <li>Default values</li> </ol> <p>This means that command-line flags will override environment variables, which will override configuration file values, which will override default values.</p>"},{"location":"getting-started/configuration/#command-line-flags","title":"Command-line Flags","text":"<p>You can configure Blink using command-line flags when you run it:</p> <pre><code>blink --path /path/to/watch --event-addr :8080 --verbose\n</code></pre> <p>See the Command Line page for a complete list of available flags.</p>"},{"location":"getting-started/configuration/#environment-variables","title":"Environment Variables","text":"<p>You can also configure Blink using environment variables. The environment variables are prefixed with <code>BLINK_</code> and use uppercase with underscores instead of dashes:</p> <pre><code>export BLINK_PATH=\"/path/to/watch\"\nexport BLINK_EVENT_ADDR=\":8080\"\nexport BLINK_VERBOSE=\"true\"\nblink\n</code></pre>"},{"location":"getting-started/configuration/#configuration-file","title":"Configuration File","text":"<p>Blink supports configuration through a YAML file. By default, it looks for a file named <code>.blink.yaml</code> in your home directory. You can specify a different file using the <code>--config</code> flag:</p> <pre><code>blink --config /path/to/config.yaml\n</code></pre> <p>Here's an example configuration file:</p> <pre><code># Directory path to watch for changes\npath: \"/path/to/watch\"\n\n# Value for Access-Control-Allow-Origin header\nallowed-origin: \"*\"\n\n# Address to serve events on ([host][:port])\nevent-addr: \":8080\"\n\n# URL path for the event stream\nevent-path: \"/events\"\n\n# Refresh duration for events (in milliseconds)\nrefresh: 100ms\n\n# Enable verbose logging\nverbose: true\n\n# Maximum number of CPUs to use\nmax-procs: 4\n\n# Include patterns for files\ninclude: \"*.js,*.css,*.html\"\n\n# Exclude patterns for files\nexclude: \"node_modules,*.tmp\"\n\n# Include event types\nevents: \"write,create\"\n\n# Ignore event types\nignore: \"chmod\"\n\n# Webhook URL\nwebhook-url: \"https://example.com/webhook\"\n\n# Webhook method\nwebhook-method: \"POST\"\n\n# Webhook headers\nwebhook-headers: \"Authorization:Bearer token,Content-Type:application/json\"\n\n# Webhook timeout\nwebhook-timeout: 5s\n\n# Webhook debounce duration\nwebhook-debounce-duration: 500ms\n\n# Webhook max retries\nwebhook-max-retries: 3\n</code></pre>"},{"location":"getting-started/configuration/#managing-configuration","title":"Managing Configuration","text":"<p>Blink provides a <code>config</code> subcommand to help you manage your configuration:</p> <pre><code># List all configuration values\nblink config list\n\n# Get a specific configuration value\nblink config get path\n\n# Set a configuration value\nblink config set path /path/to/watch\n</code></pre> <p>Configuration values set with the <code>config set</code> command are stored in the configuration file.</p>"},{"location":"getting-started/configuration/#default-values","title":"Default Values","text":"<p>If you don't specify a value for a configuration option, Blink will use the following default values:</p> Option Default Value <code>path</code> <code>.</code> (current directory) <code>allowed-origin</code> <code>*</code> <code>event-addr</code> <code>:12345</code> <code>event-path</code> <code>/events</code> <code>refresh</code> <code>100ms</code> <code>verbose</code> <code>false</code> <code>max-procs</code> Number of available CPUs <code>include</code> `` (empty, include all files) <code>exclude</code> `` (empty, exclude no files) <code>events</code> `` (empty, include all event types) <code>ignore</code> `` (empty, ignore no event types) <code>webhook-url</code> `` (empty, no webhook) <code>webhook-method</code> <code>POST</code> <code>webhook-headers</code> `` (empty, no custom headers) <code>webhook-timeout</code> <code>5s</code> <code>webhook-debounce-duration</code> <code>0s</code> (no debouncing) <code>webhook-max-retries</code> <code>3</code>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>There are several ways to install Blink, depending on your needs and preferences.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<p>Blink requires Go 1.18 or later. You can check your Go version with:</p> <pre><code>go version\n</code></pre> <p>If you don't have Go installed, you can download it from the official Go website.</p>"},{"location":"getting-started/installation/#installing-from-go-package-registry","title":"Installing from Go Package Registry","text":"<p>The easiest way to install Blink is using the Go package registry:</p> <pre><code>go install github.com/TFMV/blink/cmd/blink@latest\n</code></pre> <p>This will download and install the latest version of Blink. The binary will be installed to <code>$GOPATH/bin</code> or <code>$HOME/go/bin</code> by default.</p> <p>Tip</p> <p>Make sure your <code>$GOPATH/bin</code> or <code>$HOME/go/bin</code> directory is in your <code>PATH</code> environment variable so you can run the <code>blink</code> command from anywhere.</p>"},{"location":"getting-started/installation/#building-from-source","title":"Building from Source","text":"<p>If you want to build Blink from source, you can clone the repository and build it manually:</p> <pre><code># Clone the repository\ngit clone https://github.com/TFMV/blink.git\n\n# Navigate to the repository\ncd blink\n\n# Build the binary\ngo build -o blink ./cmd/blink\n\n# Optionally, install the binary\ngo install ./cmd/blink\n</code></pre>"},{"location":"getting-started/installation/#using-the-makefile","title":"Using the Makefile","text":"<p>If you've cloned the repository, you can also use the provided Makefile to build and install Blink:</p> <pre><code># Build the binary\nmake build\n\n# Install the binary\nmake install\n\n# Clean build artifacts\nmake clean\n</code></pre>"},{"location":"getting-started/installation/#verifying-the-installation","title":"Verifying the Installation","text":"<p>After installing Blink, you can verify that it's installed correctly by running:</p> <pre><code>blink --help\n</code></pre> <p>You should see the help output for Blink, which includes the available commands and options.</p>"},{"location":"getting-started/installation/#next-steps","title":"Next Steps","text":"<p>Now that you have Blink installed, you can:</p> <ul> <li>Follow the Quick Start guide to see Blink in action</li> <li>Learn about Configuration options</li> <li>Explore the Command Line interface</li> </ul>"},{"location":"getting-started/quick-start/","title":"Quick Start","text":"<p>This guide will help you get started with Blink quickly. We'll cover the basics of watching a directory for changes and receiving events.</p>"},{"location":"getting-started/quick-start/#basic-usage","title":"Basic Usage","text":"<p>The simplest way to use Blink is to watch the current directory:</p> <pre><code>blink\n</code></pre> <p>This will start Blink with default settings, watching the current directory for changes and serving events on <code>http://localhost:12345/events</code>.</p> <p>You should see output similar to:</p> <pre><code>Blink File System Watcher\n-------------------------\nWatching directory: .\nServing events at: http://localhost:12345/events\nRefresh duration: 100ms\nVerbose mode: false\nUsing 8 CPUs\nPress Ctrl+C to exit\n</code></pre>"},{"location":"getting-started/quick-start/#making-changes","title":"Making Changes","text":"<p>With Blink running, open another terminal and make some changes to files in the watched directory:</p> <pre><code># Create a new file\ntouch test.txt\n\n# Modify the file\necho \"Hello, Blink!\" &gt; test.txt\n\n# Remove the file\nrm test.txt\n</code></pre> <p>If you have verbose mode enabled (<code>blink --verbose</code>), you'll see these events logged in the Blink terminal.</p>"},{"location":"getting-started/quick-start/#receiving-events","title":"Receiving Events","text":"<p>To receive events from Blink, you need to connect to the event stream. Here are examples in different languages:</p> Command Line (curl)JavaScriptPythonGo <pre><code>curl -N http://localhost:12345/events\n</code></pre> <pre><code>const eventSource = new EventSource('http://localhost:12345/events');\neventSource.onmessage = function(event) {\n  console.log('File changed:', event.data);\n};\n</code></pre> <pre><code>import sseclient\nimport requests\n\nurl = 'http://localhost:12345/events'\nheaders = {'Accept': 'text/event-stream'}\nresponse = requests.get(url, headers=headers, stream=True)\nclient = sseclient.SSEClient(response)\nfor event in client.events():\n    print(f\"File changed: {event.data}\")\n</code></pre> <pre><code>package main\n\nimport (\n    \"bufio\"\n    \"fmt\"\n    \"net/http\"\n)\n\nfunc main() {\n    resp, err := http.Get(\"http://localhost:12345/events\")\n    if err != nil {\n        panic(err)\n    }\n    defer resp.Body.Close()\n\n    scanner := bufio.NewScanner(resp.Body)\n    for scanner.Scan() {\n        line := scanner.Text()\n        if len(line) &gt; 0 &amp;&amp; line[:5] == \"data:\" {\n            fmt.Println(\"File changed:\", line[6:])\n        }\n    }\n}\n</code></pre>"},{"location":"getting-started/quick-start/#common-options","title":"Common Options","text":"<p>Here are some common options you might want to use:</p> <pre><code># Watch a specific directory\nblink --path /path/to/watch\n\n# Enable verbose logging\nblink --verbose\n\n# Use a different port\nblink --event-addr :8080\n\n# Only watch specific file types\nblink --include \"*.js,*.css,*.html\"\n\n# Ignore specific directories\nblink --exclude \"node_modules,dist\"\n\n# Send webhooks when files change\nblink --webhook-url \"https://example.com/webhook\"\n</code></pre>"},{"location":"getting-started/quick-start/#next-steps","title":"Next Steps","text":"<p>Now that you've seen the basics of Blink, you can:</p> <ul> <li>Learn about Configuration options</li> <li>Explore Event Filtering</li> <li>Set up Webhooks</li> <li>Check out the Command Line interface</li> <li>Use Blink as a Library in your Go projects</li> </ul>"},{"location":"usage/command-line/","title":"Command Line","text":"<p>Blink provides a powerful command-line interface (CLI) for watching directories and receiving file system events.</p>"},{"location":"usage/command-line/#basic-usage","title":"Basic Usage","text":"<p>The simplest way to use Blink is to watch the current directory:</p> <pre><code>blink\n</code></pre> <p>This will start Blink with default settings, watching the current directory for changes and serving events on <code>http://localhost:12345/events</code>.</p>"},{"location":"usage/command-line/#command-line-options","title":"Command-line Options","text":"<p>Blink supports the following command-line options:</p>"},{"location":"usage/command-line/#core-options","title":"Core Options","text":"<ul> <li><code>--path</code>: Directory path to watch for changes (must be a valid directory) (default: \".\")</li> <li><code>--allowed-origin</code>: Value for Access-Control-Allow-Origin header (default: \"*\")</li> <li><code>--event-addr</code>: Address to serve events on ([host][:port]) (default: \":12345\")</li> <li><code>--event-path</code>: URL path for the event stream (default: \"/events\")</li> <li><code>--refresh</code>: Refresh duration for events (default: 100ms)</li> <li><code>--verbose</code>: Enable verbose logging (default: false)</li> <li><code>--max-procs</code>: Maximum number of CPUs to use (default: all available)</li> <li><code>--config</code>: Path to configuration file (default: $HOME/.blink.yaml)</li> <li><code>--help</code>: Show help</li> </ul>"},{"location":"usage/command-line/#filtering-options","title":"Filtering Options","text":"<ul> <li><code>--include</code>: Include patterns for files (e.g., \".js,.css,*.html\")</li> <li><code>--exclude</code>: Exclude patterns for files (e.g., \"node_modules,*.tmp\")</li> <li><code>--events</code>: Include event types (e.g., \"write,create\")</li> <li><code>--ignore</code>: Ignore event types (e.g., \"chmod\")</li> </ul>"},{"location":"usage/command-line/#webhook-options","title":"Webhook Options","text":"<ul> <li><code>--webhook-url</code>: URL for the webhook</li> <li><code>--webhook-method</code>: HTTP method for the webhook (default: \"POST\")</li> <li><code>--webhook-headers</code>: Headers for the webhook (format: \"key1:value1,key2:value2\")</li> <li><code>--webhook-timeout</code>: Timeout for the webhook (default: 5s)</li> <li><code>--webhook-debounce-duration</code>: Debounce duration for the webhook (default: 0s)</li> <li><code>--webhook-max-retries</code>: Maximum number of retries for the webhook (default: 3)</li> </ul>"},{"location":"usage/command-line/#subcommands","title":"Subcommands","text":""},{"location":"usage/command-line/#config","title":"config","text":"<p>The <code>config</code> subcommand is used to manage configuration:</p> <pre><code># List all configuration values\nblink config list\n\n# Get a specific configuration value\nblink config get path\n\n# Set a configuration value\nblink config set path /path/to/watch\n</code></pre>"},{"location":"usage/command-line/#version","title":"version","text":"<p>The <code>version</code> subcommand shows the version information:</p> <pre><code>blink version\n</code></pre>"},{"location":"usage/command-line/#examples","title":"Examples","text":""},{"location":"usage/command-line/#basic-examples","title":"Basic Examples","text":"<pre><code># Watch the current directory\nblink\n\n# Watch a specific directory\nblink --path /path/to/watch\n\n# Use a different port\nblink --event-addr :8080\n\n# Enable verbose logging\nblink --verbose\n</code></pre>"},{"location":"usage/command-line/#filtering-examples","title":"Filtering Examples","text":"<pre><code># Only watch for changes to JavaScript files\nblink --include \"*.js\"\n\n# Ignore node_modules directory\nblink --exclude \"node_modules\"\n\n# Only trigger on write events\nblink --events \"write\"\n\n# Ignore chmod events\nblink --ignore \"chmod\"\n\n# Complex filtering\nblink --include \"*.js,*.css,*.html\" --exclude \"node_modules,*.tmp\" --events \"write,create\" --ignore \"chmod\"\n</code></pre>"},{"location":"usage/command-line/#webhook-examples","title":"Webhook Examples","text":"<pre><code># Send webhooks to a URL\nblink --webhook-url \"https://example.com/webhook\"\n\n# Use a specific HTTP method\nblink --webhook-method \"PUT\"\n\n# Add custom headers\nblink --webhook-headers \"Authorization:Bearer token,Content-Type:application/json\"\n\n# Set timeout and retry options\nblink --webhook-timeout 10s --webhook-max-retries 5\n\n# Debounce webhooks\nblink --webhook-debounce-duration 500ms\n\n# Combine with filters\nblink --include \"*.js\" --events \"write\" --webhook-url \"https://example.com/webhook\"\n</code></pre>"},{"location":"usage/command-line/#configuration-examples","title":"Configuration Examples","text":"<pre><code># Use a specific configuration file\nblink --config /path/to/config.yaml\n\n# List all configuration values\nblink config list\n\n# Get a specific configuration value\nblink config get path\n\n# Set a configuration value\nblink config set path /path/to/watch\n</code></pre>"},{"location":"usage/examples/","title":"Examples","text":"<p>Blink includes several examples to help you get started. These examples demonstrate different ways to use Blink in your projects.</p>"},{"location":"usage/examples/#simple-example","title":"Simple Example","text":"<p>The simple example demonstrates how to use Blink as a library to watch a directory and print events to the console.</p> <pre><code>package main\n\nimport (\n \"fmt\"\n \"os\"\n \"os/signal\"\n \"runtime\"\n \"syscall\"\n \"time\"\n\n \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n // Set verbose mode to see events in the console\n blink.SetVerbose(true)\n\n // Directory to watch\n path := \".\"\n\n // Configure the number of CPUs to use\n maxProcs := runtime.NumCPU()\n if maxProcs &gt; 4 {\n  maxProcs = 4 // Limit to 4 CPUs for this example\n }\n runtime.GOMAXPROCS(maxProcs)\n\n // Print startup information\n fmt.Printf(\"Blink Example\\n\")\n fmt.Printf(\"------------\\n\")\n fmt.Printf(\"Watching directory: %s\\n\", path)\n fmt.Printf(\"Using %d CPUs\\n\", maxProcs)\n fmt.Printf(\"Press Ctrl+C to stop\\n\\n\")\n\n // Create a channel to receive OS signals\n sigs := make(chan os.Signal, 1)\n\n // Register for SIGINT (Ctrl+C) and SIGTERM\n signal.Notify(sigs, syscall.SIGINT, syscall.SIGTERM)\n\n // Create a new filesystem watcher\n watcher, err := blink.NewRecursiveWatcher(path)\n if err != nil {\n  fmt.Printf(\"Error creating watcher: %v\\n\", err)\n  os.Exit(1)\n }\n defer watcher.Close()\n\n // Create a channel to track events\n events := make(chan blink.Event, 100)\n\n // Start a goroutine to collect events\n go func() {\n  for {\n   select {\n   case ev := &lt;-watcher.Events:\n    event := blink.Event(ev)\n    events &lt;- event\n    fmt.Printf(\"Event: %s %s\\n\", event.Op.String(), event.Name)\n   case err := &lt;-watcher.Errors:\n    fmt.Printf(\"Error: %v\\n\", err)\n   }\n  }\n }()\n\n fmt.Println(\"Watching for file changes. Events will be printed below:\")\n fmt.Println(\"------------------------------------------------------\")\n\n // Wait for a signal or for the watcher to exit\n &lt;-sigs\n\n fmt.Println(\"\\nShutting down...\")\n}\n</code></pre> <p>To run this example:</p> <pre><code>cd examples/simple\ngo run main.go\n</code></pre>"},{"location":"usage/examples/#web-example","title":"Web Example","text":"<p>The web example demonstrates how to use Blink with a web interface to display file changes in real-time.</p> <pre><code>&lt;!DOCTYPE html&gt;\n&lt;html lang=\"en\"&gt;\n&lt;head&gt;\n    &lt;meta charset=\"UTF-8\"&gt;\n    &lt;meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\"&gt;\n    &lt;title&gt;Blink File Watcher&lt;/title&gt;\n    &lt;style&gt;\n        body {\n            font-family: 'Inter', sans-serif;\n            background-color: #f8f9fa;\n            margin: 0;\n            padding: 0;\n            display: flex;\n            justify-content: center;\n            align-items: center;\n            min-height: 100vh;\n        }\n        .container {\n            background-color: #ffffff;\n            border-radius: 6px;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n            padding: 2rem;\n            width: 90%;\n            max-width: 700px;\n        }\n        .page-title {\n            font-size: 2.25rem;\n            font-weight: 600;\n            text-align: center;\n            margin-bottom: 1.5rem;\n            color: #2e86de;\n        }\n        .status-indicator {\n            text-align: center;\n            padding: 0.75rem 1.25rem;\n            border-radius: 6px;\n            font-weight: 500;\n            margin-bottom: 1.5rem;\n            transition: background-color 0.3s, color 0.3s;\n        }\n        .status-connected {\n            background-color: #d4edda;\n            color: #28a745;\n            border: 1px solid #c3e6cb;\n        }\n        .status-disconnected {\n            background-color: #f8d7da;\n            color: #dc3545;\n            border: 1px solid #f5c6cb;\n        }\n        .button-group {\n            display: flex;\n            justify-content: center;\n            gap: 1rem;\n            margin-bottom: 2rem;\n        }\n        .btn {\n            padding: 0.6rem 1.5rem;\n            font-size: 1rem;\n            border: none;\n            border-radius: 6px;\n            cursor: pointer;\n            transition: background-color 0.3s ease, transform 0.1s ease;\n            font-weight: 500;\n            text-transform: uppercase;\n            letter-spacing: 0.5px;\n            background-color: #2e86de;\n            color: white;\n        }\n        .events-list {\n            max-height: 400px;\n            overflow-y: auto;\n            border: 1px solid #dee2e6;\n            border-radius: 6px;\n            padding: 1rem;\n            background-color: #f8f9fa;\n        }\n        .event-item {\n            background-color: #ffffff;\n            border: 1px solid #dee2e6;\n            border-radius: 6px;\n            padding: 0.75rem;\n            margin-bottom: 0.75rem;\n            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.05);\n        }\n    &lt;/style&gt;\n&lt;/head&gt;\n&lt;body&gt;\n    &lt;div class=\"container\"&gt;\n        &lt;h1 class=\"page-title\"&gt;Blink File Watcher&lt;/h1&gt;\n\n        &lt;div id=\"status\" class=\"status-indicator status-disconnected\"&gt;Disconnected&lt;/div&gt;\n\n        &lt;div class=\"button-group\"&gt;\n            &lt;button id=\"connect\" class=\"btn\"&gt;Connect&lt;/button&gt;\n            &lt;button id=\"disconnect\" class=\"btn\"&gt;Disconnect&lt;/button&gt;\n            &lt;button id=\"clear\" class=\"btn\"&gt;Clear Events&lt;/button&gt;\n        &lt;/div&gt;\n\n        &lt;h2&gt;File Change Events&lt;/h2&gt;\n        &lt;div id=\"events\" class=\"events-list\"&gt;&lt;/div&gt;\n    &lt;/div&gt;\n\n    &lt;script&gt;\n        let eventSource = null;\n        const eventsContainer = document.getElementById('events');\n        const statusElement = document.getElementById('status');\n        const connectButton = document.getElementById('connect');\n        const disconnectButton = document.getElementById('disconnect');\n        const clearButton = document.getElementById('clear');\n\n        // Connect to the event source\n        function connect() {\n            if (eventSource) {\n                disconnect();\n            }\n\n            eventSource = new EventSource('http://localhost:12345/events');\n\n            eventSource.onopen = function() {\n                statusElement.textContent = 'Connected';\n                statusElement.classList.remove('status-disconnected');\n                statusElement.classList.add('status-connected');\n                console.log('Connected to event source');\n            };\n\n            eventSource.onmessage = function(event) {\n                console.log('Received event:', event.data);\n\n                const eventElement = document.createElement('div');\n                eventElement.className = 'event-item';\n\n                const timeElement = document.createElement('div');\n                timeElement.className = 'event-time';\n                timeElement.textContent = new Date().toLocaleTimeString();\n                eventElement.appendChild(timeElement);\n\n                const pathElement = document.createElement('div');\n                pathElement.className = 'event-path';\n                pathElement.textContent = event.data;\n                eventElement.appendChild(pathElement);\n\n                eventsContainer.appendChild(eventElement);\n                eventsContainer.scrollTop = eventsContainer.scrollHeight;\n            };\n\n            eventSource.onerror = function() {\n                statusElement.textContent = 'Error connecting';\n                statusElement.classList.remove('status-connected');\n                statusElement.classList.add('status-disconnected');\n\n                console.error('Error connecting to event source');\n                disconnect();\n            };\n        }\n\n        // Disconnect from the event source\n        function disconnect() {\n            if (eventSource) {\n                eventSource.close();\n                eventSource = null;\n                statusElement.textContent = 'Disconnected';\n                statusElement.classList.remove('status-connected');\n                statusElement.classList.add('status-disconnected');\n                console.log('Disconnected from event source');\n            }\n        }\n\n        // Clear events\n        function clearEvents() {\n            eventsContainer.innerHTML = '';\n        }\n\n        connectButton.addEventListener('click', connect);\n        disconnectButton.addEventListener('click', disconnect);\n        clearButton.addEventListener('click', clearEvents);\n    &lt;/script&gt;\n&lt;/body&gt;\n&lt;/html&gt;\n</code></pre> <p>To use this example:</p> <ol> <li>Start Blink:</li> </ol> <pre><code>blink\n</code></pre> <ol> <li>Open the HTML file in a web browser:</li> </ol> <pre><code>cd examples/web\n# Open index.html in your browser\n</code></pre> <ol> <li> <p>Click the \"Connect\" button to connect to the event stream.</p> </li> <li> <p>Make some changes to files in the watched directory to see events appear in the web interface.</p> </li> </ol>"},{"location":"usage/examples/#custom-examples","title":"Custom Examples","text":""},{"location":"usage/examples/#watching-multiple-directories","title":"Watching Multiple Directories","text":"<pre><code>package main\n\nimport (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Start multiple watchers\n    go blink.EventServer(\n        \"/path/to/dir1\",\n        \"*\",\n        \":12345\",\n        \"/events/dir1\",\n        100*time.Millisecond,\n    )\n\n    go blink.EventServer(\n        \"/path/to/dir2\",\n        \"*\",\n        \":12345\",\n        \"/events/dir2\",\n        100*time.Millisecond,\n    )\n\n    // Wait forever\n    select {}\n}\n</code></pre>"},{"location":"usage/examples/#custom-event-handling","title":"Custom Event Handling","text":"<pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Create a watcher\n    watcher, err := blink.NewRecursiveWatcher(\".\")\n    if err != nil {\n        panic(err)\n    }\n    defer watcher.Close()\n\n    // Handle events\n    for {\n        select {\n        case event := &lt;-watcher.Events:\n            // Custom event handling\n            if event.Op&amp;blink.Write != 0 {\n                fmt.Printf(\"File modified: %s\\n\", event.Name)\n                // Do something with the modified file\n            }\n        case err := &lt;-watcher.Errors:\n            fmt.Printf(\"Error: %v\\n\", err)\n        }\n    }\n}\n</code></pre>"},{"location":"usage/library/","title":"Using as a Library","text":"<p>Blink can be used as a library in your Go projects, providing programmatic access to its file system watching capabilities.</p>"},{"location":"usage/library/#installation","title":"Installation","text":"<p>To use Blink as a library, add it to your Go project:</p> <pre><code>go get github.com/TFMV/blink\n</code></pre>"},{"location":"usage/library/#basic-usage","title":"Basic Usage","text":"<p>Here's a simple example of using Blink as a library:</p> <pre><code>package main\n\nimport (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Set verbose mode\n    blink.SetVerbose(true)\n\n    // Start the event server\n    blink.EventServer(\n        \".\",                  // Directory to watch\n        \"*\",                  // Allow all origins\n        \":12345\",             // Listen on port 12345\n        \"/events\",            // Event path\n        100*time.Millisecond, // Refresh duration\n    )\n\n    // Wait for events\n    select {}\n}\n</code></pre>"},{"location":"usage/library/#event-filtering","title":"Event Filtering","text":"<p>You can filter events based on file patterns or event types:</p> <pre><code>package main\n\nimport (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Create a filter\n    filter := blink.NewEventFilter()\n\n    // Set include patterns\n    filter.SetIncludePatterns(\"*.js,*.css,*.html\")\n\n    // Set exclude patterns\n    filter.SetExcludePatterns(\"node_modules,*.tmp\")\n\n    // Set include event types\n    filter.SetIncludeEvents(\"write,create\")\n\n    // Set ignore event types\n    filter.SetIgnoreEvents(\"chmod\")\n\n    // Start the event server with the filter\n    blink.EventServer(\n        \".\",                  // Directory to watch\n        \"*\",                  // Allow all origins\n        \":12345\",             // Listen on port 12345\n        \"/events\",            // Event path\n        100*time.Millisecond, // Refresh duration\n        blink.WithFilter(filter),\n    )\n\n    select {}\n}\n</code></pre>"},{"location":"usage/library/#webhooks","title":"Webhooks","text":"<p>You can configure webhooks to send HTTP requests when file changes occur:</p> <pre><code>package main\n\nimport (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Start the event server with webhooks\n    blink.EventServer(\n        \".\",                  // Directory to watch\n        \"*\",                  // Allow all origins\n        \":12345\",             // Listen on port 12345\n        \"/events\",            // Event path\n        100*time.Millisecond, // Refresh duration\n        // Webhook options\n        blink.WithWebhook(\"https://example.com/webhook\", \"POST\"),\n        blink.WithWebhookHeaders(map[string]string{\n            \"Authorization\": \"Bearer token\",\n            \"Content-Type\": \"application/json\",\n        }),\n        blink.WithWebhookTimeout(10*time.Second),\n        blink.WithWebhookDebounce(500*time.Millisecond),\n        blink.WithWebhookRetries(5),\n    )\n\n    select {}\n}\n</code></pre>"},{"location":"usage/library/#combining-options","title":"Combining Options","text":"<p>You can combine multiple options:</p> <pre><code>package main\n\nimport (\n    \"time\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Create a filter\n    filter := blink.NewEventFilter()\n    filter.SetIncludePatterns(\"*.js,*.css,*.html\")\n    filter.SetExcludePatterns(\"node_modules,*.tmp\")\n    filter.SetIncludeEvents(\"write,create\")\n    filter.SetIgnoreEvents(\"chmod\")\n\n    // Start the event server with multiple options\n    blink.EventServer(\n        \".\",                  // Directory to watch\n        \"*\",                  // Allow all origins\n        \":12345\",             // Listen on port 12345\n        \"/events\",            // Event path\n        100*time.Millisecond, // Refresh duration\n        // Options\n        blink.WithFilter(filter),\n        blink.WithWebhook(\"https://example.com/webhook\", \"POST\"),\n        blink.WithWebhookHeaders(map[string]string{\n            \"Authorization\": \"Bearer token\",\n            \"Content-Type\": \"application/json\",\n        }),\n        blink.WithWebhookTimeout(10*time.Second),\n        blink.WithWebhookDebounce(500*time.Millisecond),\n        blink.WithWebhookRetries(5),\n    )\n\n    select {}\n}\n</code></pre>"},{"location":"usage/library/#custom-event-handling","title":"Custom Event Handling","text":"<p>If you want to handle events directly instead of using the built-in server, you can use the <code>RecursiveWatcher</code>:</p> <pre><code>package main\n\nimport (\n    \"fmt\"\n    \"github.com/TFMV/blink/pkg/blink\"\n)\n\nfunc main() {\n    // Create a watcher\n    watcher, err := blink.NewRecursiveWatcher(\".\")\n    if err != nil {\n        panic(err)\n    }\n    defer watcher.Close()\n\n    // Create a filter\n    filter := blink.NewEventFilter()\n    filter.SetIncludePatterns(\"*.js,*.css,*.html\")\n\n    // Handle events\n    for {\n        select {\n        case event := &lt;-watcher.Events:\n            // Apply filter\n            if filter.ShouldInclude(event) {\n                fmt.Printf(\"Event: %s %s\\n\", event.Op.String(), event.Name)\n            }\n        case err := &lt;-watcher.Errors:\n            fmt.Printf(\"Error: %v\\n\", err)\n        }\n    }\n}\n</code></pre>"}]}